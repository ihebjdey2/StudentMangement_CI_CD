pipeline {
    agent any

    tools {
        maven 'M3'
        jdk 'jdk17'
    }

    options {
        timestamps()
        skipDefaultCheckout(false)
    }

    environment {
        REGISTRY = 'iheb7u7'
        IMAGE_NAME = 'student-management'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        SONARQUBE_ENV = 'SonarQube'
        SONAR_TOKEN_ID = 'sonar-token'
        NEXUS_CREDS = 'nexus-creds'
        MVN_SETTINGS = 'global-maven-settings'
    }

    stages {

        // 1Ô∏è‚É£ √âtape : R√©cup√©ration du code
        stage('Checkout') {
            steps {
                echo "üîπ [Checkout] R√©cup√©ration du code depuis GitHub..."
                checkout scm
            }
        }

        // 2Ô∏è‚É£ √âtape : Compilation + Tests
        stage('Build & Test') {
            steps {
                echo "üß™ [Build & Test] Compilation du projet et ex√©cution des tests unitaires..."
                sh 'mvn -B clean verify -Dspring.profiles.active=test'
            }
            post {
                success {
                    echo "‚úÖ Tests pass√©s avec succ√®s !"
                }
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        // 3Ô∏è‚É£ √âtape : Analyse SonarQube
        stage('SonarQube Analysis') {
            steps {
                echo "üîç [SonarQube] Analyse de la qualit√© du code en cours..."
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    withCredentials([string(credentialsId: "${SONAR_TOKEN_ID}", variable: 'SONAR_TOKEN')]) {
                        sh """
                            mvn sonar:sonar \
                              -Dsonar.projectKey=${IMAGE_NAME} \
                              -Dsonar.host.url=http://sonarqube:9000 \
                              -Dsonar.login=${SONAR_TOKEN} \
                              -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                        """
                    }
                }
            }
        }

        // 4Ô∏è‚É£ √âtape : Packaging
        stage('Package') {
            steps {
                echo "üì¶ [Package] Cr√©ation du livrable JAR..."
                sh 'mvn -B -DskipTests package'
            }
        }

        // 5Ô∏è‚É£ √âtape : Archivage
        stage('Archive') {
            steps {
                echo "üóÇÔ∏è [Archive] Archivage du JAR g√©n√©r√©..."
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // 6Ô∏è‚É£ √âtape : D√©ploiement sur Nexus
        stage('Deploy to Nexus') {
            steps {
                echo "üöÄ [Nexus] D√©ploiement de l‚Äôart√©fact sur Nexus Repository..."
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDS}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    withMaven(maven: 'M3', globalMavenSettingsConfig: "${MVN_SETTINGS}") {
                        sh 'mvn clean deploy -DskipTests'
                    }
                }
            }
        }

        // 7Ô∏è‚É£ √âtape : Build & Push Docker Image
        stage('Build & Push Docker Image') {
            steps {
                echo "üê≥ [Docker] Construction et push de l‚Äôimage Docker vers DockerHub..."
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        def image = docker.build("${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}")
                        image.push()
                        image.push("latest")
                    }
                }
            }
        }

        // 8Ô∏è‚É£ √âtape : D√©ploiement Application
        stage('Deploy Application') {
            steps {
                echo "üöÄ [Deploy] D√©ploiement de l‚Äôapplication sur Docker Compose..."
                sh '''
                    echo "üß† V√©rification du r√©seau devops-net..."
                    docker network create devops-net || true

                    echo "üßπ Nettoyage de l'ancienne version..."
                    docker stop student-management || true
                    docker rm -f student-management || true

                    echo "üî® Lancement du nouveau conteneur..."
                    docker compose -f docker-compose.yml up -d --build student-management
                '''
            }
        }

        // 9Ô∏è‚É£ √âtape : Monitoring Stack
        stage('Monitoring Stack') {
            steps {
                echo "üìä [Monitoring] D√©ploiement de Prometheus + Grafana..."
                sh '''
                    cd monitoring
                    echo "üì¶ T√©l√©chargement des images du stack..."
                    docker compose -f docker-compose.yml pull || true

                    echo "üöÄ D√©marrage du stack de monitoring..."
                    docker compose -f docker-compose.yml up -d

                    echo "‚úÖ Monitoring stack d√©marr√© avec succ√®s !"
                '''
            }
        }
    }

    // üß© R√©sum√© final
    post {
        success {
            echo ""
            echo "=============================================================="
            echo "‚úÖ PIPELINE TERMIN√â AVEC SUCC√àS !"
            echo "--------------------------------------------------------------"
            echo "üì¶  Code compil√© et test√©"
            echo "üîç  Analyse SonarQube effectu√©e ‚Üí http://localhost:9000"
            echo "üóÇÔ∏è  Artefact d√©ploy√© sur Nexus ‚Üí http://localhost:8081"
            echo "üê≥  Image Docker pouss√©e ‚Üí https://hub.docker.com/r/${REGISTRY}/${IMAGE_NAME}"
            echo "üöÄ  Application d√©ploy√©e ‚Üí http://localhost:8089/student/swagger-ui/index.html"
            echo "üìà  Monitoring ‚Üí Grafana: http://localhost:3000 | Prometheus: http://localhost:9090"
            echo "=============================================================="
        }
        failure {
            echo "‚ùå Le pipeline a √©chou√©. V√©rifie les logs Jenkins pour les d√©tails."
        }
    }
}
