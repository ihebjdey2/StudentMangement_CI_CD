pipeline {
    agent any

    tools {
        maven 'M3'
        jdk 'jdk17'
    }

    options {
        timestamps()
        skipDefaultCheckout(false)
    }

    environment {
        REGISTRY = 'iheb7u7'
        IMAGE_NAME = 'student-management'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        SONARQUBE_ENV = 'SonarQube'
        SONAR_TOKEN_ID = 'sonar-token'
        NEXUS_CREDS = 'nexus-creds'
        MVN_SETTINGS = 'global-maven-settings'
    }

    stages {

        // 1Ô∏è‚É£ √âtape : R√©cup√©ration du code source
        stage('Checkout') {
            steps {
                echo "------------------------------------------------------------"
                echo "üîπ [Checkout] R√©cup√©ration du code depuis GitHub..."
                echo "------------------------------------------------------------"
                checkout scm
            }
        }

        // 2Ô∏è‚É£ √âtape : Compilation et Tests
        stage('Build & Test') {
            steps {
                echo "------------------------------------------------------------"
                echo "üß™ [Build & Test] Compilation du projet et ex√©cution des tests unitaires..."
                echo "------------------------------------------------------------"
                sh 'mvn -B clean verify -Dspring.profiles.active=test'

                script {
                    echo "üìä Extraction du r√©sum√© des tests..."
                    def reportFile = sh(script: "find . -type f -name 'TEST-*.xml' | head -n 1", returnStdout: true).trim()

                    if (reportFile) {
                        def content = readFile(reportFile)
                        def tests = (content =~ /tests="([0-9]+)"/)[0][1].toInteger()
                        def failures = (content =~ /failures="([0-9]+)"/)[0][1].toInteger()
                        def errors = (content =~ /errors="([0-9]+)"/)[0][1].toInteger()
                        def skipped = (content =~ /skipped="([0-9]+)"/)[0][1].toInteger()
                        def passed = tests - failures - errors - skipped

                        echo "------------------------------------------------------------"
                        echo "üßæ R√âSULTATS DES TESTS UNITAIRES"
                        echo "------------------------------------------------------------"
                        echo "üß© Total de tests ex√©cut√©s : ${tests}"
                        echo "‚úÖ R√©ussis : ${passed}"
                        echo "‚ùå √âchecs : ${failures}"
                        echo "üí• Erreurs : ${errors}"
                        echo "‚ö†Ô∏è Ignor√©s : ${skipped}"
                        echo "------------------------------------------------------------"

                        if (failures > 0 || errors > 0) {
                            error("‚ùå Certains tests ont √©chou√© (${failures} failures, ${errors} errors). Pipeline interrompu.")
                        }
                    } else {
                        echo "‚ö†Ô∏è Aucun rapport de test trouv√©. V√©rifie la configuration Maven Surefire."
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
                success {
                    echo "‚úÖ Tous les tests unitaires sont pass√©s avec succ√®s."
                }
            }
        }

        // 3Ô∏è‚É£ √âtape : Analyse de qualit√© SonarQube
        stage('SonarQube Analysis') {
            steps {
                echo "------------------------------------------------------------"
                echo "üîç [SonarQube] Analyse de la qualit√© du code..."
                echo "------------------------------------------------------------"
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    withCredentials([string(credentialsId: "${SONAR_TOKEN_ID}", variable: 'SONAR_TOKEN')]) {
                        sh """
                            mvn sonar:sonar \
                              -Dsonar.projectKey=${IMAGE_NAME} \
                              -Dsonar.host.url=http://sonarqube:9000 \
                              -Dsonar.login=${SONAR_TOKEN} \
                              -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                        """
                    }
                }
            }
        }

        // 4Ô∏è‚É£ √âtape : Cr√©ation du livrable JAR
        stage('Package') {
            steps {
                echo "------------------------------------------------------------"
                echo "üì¶ [Package] Cr√©ation du livrable JAR..."
                echo "------------------------------------------------------------"
                sh 'mvn -B -DskipTests package'
            }
        }

        // 5Ô∏è‚É£ √âtape : Archivage du livrable
        stage('Archive') {
            steps {
                echo "------------------------------------------------------------"
                echo "üóÇÔ∏è [Archive] Archivage du JAR g√©n√©r√©..."
                echo "------------------------------------------------------------"
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        // 6Ô∏è‚É£ √âtape : D√©ploiement sur Nexus Repository
        stage('Deploy to Nexus') {
            steps {
                echo "------------------------------------------------------------"
                echo "üöÄ [Nexus] D√©ploiement de l‚Äôart√©fact sur Nexus..."
                echo "------------------------------------------------------------"
                withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDS}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    withMaven(maven: 'M3', globalMavenSettingsConfig: "${MVN_SETTINGS}") {
                        sh 'mvn clean deploy -DskipTests'
                    }
                }
            }
        }

        // 7Ô∏è‚É£ √âtape : Build & Push Docker Image
        stage('Build & Push Docker Image') {
            steps {
                echo "------------------------------------------------------------"
                echo "üê≥ [Docker] Construction et publication de l‚Äôimage Docker..."
                echo "------------------------------------------------------------"
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        def image = docker.build("${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}")
                        image.push()
                        image.push("latest")
                    }
                }
            }
        }

        // 8Ô∏è‚É£ √âtape : D√©ploiement de l‚Äôapplication
        stage('Deploy Application') {
            steps {
                echo "------------------------------------------------------------"
                echo "üöÄ [Deploy] D√©ploiement de l‚Äôapplication via Docker Compose..."
                echo "------------------------------------------------------------"
                sh '''
                    echo "üß† V√©rification du r√©seau devops-net..."
                    docker network create devops-net || true

                    echo "üßπ Nettoyage de l'ancienne version..."
                    docker stop student-management || true
                    docker rm -f student-management || true

                    echo "üî® Lancement de la nouvelle image..."
                    docker compose -f docker-compose.yml up -d --build student-management
                '''
            }
        }

        // 9Ô∏è‚É£ √âtape : Monitoring Stack (Prometheus + Grafana)
        stage('Monitoring Stack') {
            steps {
                echo "------------------------------------------------------------"
                echo "üìä [Monitoring] D√©ploiement du stack de monitoring..."
                echo "------------------------------------------------------------"
                sh '''
                    cd monitoring
                    echo "üì¶ T√©l√©chargement des images..."
                    docker compose -f docker-compose.yml pull || true

                    echo "üöÄ D√©marrage du stack..."
                    docker compose -f docker-compose.yml up -d

                    echo "‚úÖ Monitoring stack d√©marr√© avec succ√®s !"
                '''
            }
        }
    }

    // üîö R√©sum√© global du pipeline
    post {
        success {
            echo ""
            echo "=============================================================="
            echo "‚úÖ PIPELINE TERMIN√â AVEC SUCC√àS üéØ"
            echo "--------------------------------------------------------------"
            echo "üì¶  Code compil√© et test√© avec succ√®s"
            echo "üîç  Analyse SonarQube ‚Üí http://localhost:9000"
            echo "üóÇÔ∏è  Artefact Nexus ‚Üí http://localhost:8081"
            echo "üê≥  Image DockerHub ‚Üí https://hub.docker.com/r/${REGISTRY}/${IMAGE_NAME}"
            echo "üöÄ  Application ‚Üí http://localhost:8089/student/swagger-ui/index.html"
            echo "üìà  Monitoring ‚Üí Grafana: http://localhost:3000 | Prometheus: http://localhost:9090"
            echo "=============================================================="
        }
        failure {
            echo "‚ùå Le pipeline a √©chou√©. Consulte les logs Jenkins pour plus de d√©tails."
        }
    }
}
